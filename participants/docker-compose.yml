---

services:
  go-stdlib:
    build:
      context: go/stdlib
    environment:
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - "8000:8000"
  uvicorn:
    build:
      context: python/uvicorn
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WEB_CONCURRENCY=4
      - LOOP=uvloop
      - HTTP=httptools
      - JSON_LIBRARY=orjson
    ports:
      - "8000:8000"
  uvicorn-h11:
    build:
      context: python/uvicorn
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WEB_CONCURRENCY=4
      - LOOP=uvloop
      - HTTP=h11
      - JSON_LIBRARY=orjson
    ports:
      - "8000:8000"
  uvicorn-one-worker:
    build:
      context: python/uvicorn
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WEB_CONCURRENCY=1
      - LOOP=uvloop
      - HTTP=httptools
      - JSON_LIBRARY=orjson
    ports:
      - "8000:8000"
  uvicorn-asyncio:
    build:
      context: python/uvicorn
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WEB_CONCURRENCY=4
      - LOOP=asyncio
      - HTTP=httptools
      - JSON_LIBRARY=orjson
    ports:
      - "8000:8000"
  uvicorn-stdlib:
    build:
      context: python/uvicorn
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WEB_CONCURRENCY=4
      - LOOP=asyncio
      - HTTP=h11
      - JSON_LIBRARY=stdlib
    ports:
      - "8000:8000"
  uvicorn-stdlib-one-worker:
    build:
      context: python/uvicorn
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WEB_CONCURRENCY=1
      - LOOP=asyncio
      - HTTP=h11
      - JSON_LIBRARY=stdlib
    ports:
      - "8000:8000"
  uvicorn-pypy:
    build:
      context: python/uvicorn
      dockerfile: Dockerfile.pypy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WEB_CONCURRENCY=4
    ports:
      - "8000:8000"
  fastapi:
    build:
      context: python/fastapi
    environment:
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - "8000:8000"
  fastapi-sync-endpoints:
    build:
      context: python/fastapi
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SYNC_ENDPOINTS=1
    ports:
      - "8000:8000"
  fastapi-sync-dependency:
    build:
      context: python/fastapi
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SYNC_DEPENDENCY=1
    ports:
      - "8000:8000"
  django-sync-worker:
    build:
      context: python/django
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - WORKER_CLASS=sync
    ports:
      - "8000:8000"
  django-gthread-worker:
    build:
      context: python/django
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - WORKER_CLASS=gthread
      - THREADS=10
    ports:
      - "8000:8000"
  django-gevent-worker:
    build:
      context: python/django
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - WORKER_CLASS=gevent
    ports:
      - "8000:8000"
  django-asgi:
    build:
      context: python/django
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - ASYNC_MODE=1
    ports:
      - "8000:8000"
  robyn:
    build:
      context: python/robyn
    environment:
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - "8000:8000"
  socketify-async:
    build:
      context: python/socketify
    platform: linux/amd64
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SQL_DRIVER=asyncpg
    ports:
      - "8000:8000"
  socketify-sync:
    build:
      context: python/socketify
      dockerfile: Dockerfile.psycopg
    platform: linux/amd64
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SYNC_ENDPOINTS=1
      - SQL_DRIVER=psycopg_sync
    ports:
      - "8000:8000"
  socketify-async-pypy:
    build:
      context: python/socketify
      dockerfile: Dockerfile.psycopg_pypy
    platform: linux/amd64
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SQL_DRIVER=psycopg_async
    ports:
      - "8000:8000"
  socketify-sync-pypy:
    build:
      context: python/socketify
      dockerfile: Dockerfile.psycopg_pypy
    platform: linux/amd64
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SYNC_ENDPOINTS=1
      - SQL_DRIVER=psycopg_sync
    ports:
      - "8000:8000"
  falcon-wsgi-sync-worker:
    build:
      context: python/falcon
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WORKER_CLASS=sync
    ports:
      - "8000:8000"
  falcon-wsgi-gthread-worker:
    build:
      context: python/falcon
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WORKER_CLASS=gthread
      - THREADS=10
    ports:
      - "8000:8000"
  falcon-wsgi-gevent-worker:
    build:
      context: python/falcon
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WORKER_CLASS=gevent
    ports:
      - "8000:8000"
  falcon-wsgi-sync-worker-pypy:
    build:
      context: python/falcon
      dockerfile: Dockerfile.pypy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WORKER_CLASS=sync
    ports:
      - "8000:8000"
  falcon-wsgi-gthread-worker-pypy:
    build:
      context: python/falcon
      dockerfile: Dockerfile.pypy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WORKER_CLASS=gthread
      - THREADS=10
    ports:
      - "8000:8000"
  falcon-wsgi-gevent-worker-pypy:
    build:
      context: python/falcon
      dockerfile: Dockerfile.pypy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - WORKER_CLASS=gevent
    ports:
      - "8000:8000"

networks:
  default:
    name: webbench
    external: true
